package cn.topcheer.halberd.app.controller.framework.api;import cn.topcheer.halberd.app.api.framework.dto.TestConnectDTO;import cn.topcheer.halberd.app.api.framework.dto.api.AmDataSourceDTO;import cn.topcheer.halberd.app.api.framework.dto.db.ExecuteSqlRequest;import cn.topcheer.halberd.app.api.framework.dto.db.ExecuteSqlResult;import cn.topcheer.halberd.app.api.framework.entity.api.AmDataSource;import cn.topcheer.halberd.app.api.framework.service.api.AmDataSourceService;import cn.topcheer.halberd.app.biz.framework.service.DataSourceManagementService;import cn.topcheer.halberd.app.dao.validation.UniqueEntity;import com.baomidou.mybatisplus.core.metadata.IPage;import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springblade.core.boot.ctrl.BladeController;import org.springblade.core.mp.support.Query;import org.springblade.core.secure.utils.AuthUtil;import org.springblade.core.tool.api.R;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.time.LocalDateTime;import java.util.Date;import java.util.List;/** * 控制器 * * @author dpms */@Slf4j@RestController@AllArgsConstructor@RequestMapping("/am_datasource")@Api(value = "数据源管理", tags = "API-数据源管理")@Validatedpublic class DataSourceController extends BladeController {    private final DataSourceManagementService dataSourceManagementService;    /**     * 分页     */    @GetMapping("/list")    @ApiOperationSupport(order = 2)    @ApiOperation(value = "分页", notes = "传入amDataSourceDTO")    public R<IPage<AmDataSource>> list(AmDataSourceDTO amDataSourceDTO, Query query) {        if (amDataSourceDTO.getIsMyCreate() != null && amDataSourceDTO.getIsMyCreate() == 1) {            amDataSourceDTO.setCreateUser(AuthUtil.getUserId());        }        return R.data(dataSourceManagementService.page(amDataSourceDTO, query));    }    /**     * 详情     */    @GetMapping("/detail")    @ApiOperationSupport(order = 1)    @ApiOperation(value = "详情", notes = "传入amDataSourceDTO")    public R<AmDataSource> detail(AmDataSourceDTO amDataSourceDTO) {        return R.data(dataSourceManagementService.detail(amDataSourceDTO));    }    /**     * 根据条件查询所有启用数据源     */    @GetMapping("/select")    @ApiOperationSupport(order = 3)    @ApiOperation(value = "根据条件查询所有启用数据源", notes = "")    public R<List<AmDataSource>> select(AmDataSourceDTO amDataSourceDTO) {        return R.data(dataSourceManagementService.findAllEnabled(amDataSourceDTO));    }    /**     * 新增     */    @PostMapping("/save")    @ApiOperationSupport(order = 4)    @ApiOperation(value = "新增", notes = "传入amDataSourceDTO")    public R<AmDataSource> save(@Validated @RequestBody                                @UniqueEntity(                                        message = "已存在同名数据源！",                                        entityService = AmDataSourceService.class,                                        uniqueFields = {"name"}                                ) AmDataSourceDTO amDataSourceDTO) {        amDataSourceDTO.setApproveStatus(AuthUtil.isAdmin() ? 2 : 0);        amDataSourceDTO.setCreateUser(AuthUtil.getUserId());        amDataSourceDTO.setCreateTime(LocalDateTime.now());        return R.status(dataSourceManagementService.create(amDataSourceDTO));    }    @PostMapping("/test-connect")    @ApiOperationSupport(order = 5)    @ApiOperation(value = "测试连接")    public R<AmDataSource> testConnect(@Validated @RequestBody TestConnectDTO testConnectDTO) {        return R.status(dataSourceManagementService.testConnection(testConnectDTO.getUrl(), testConnectDTO.getUser(), testConnectDTO.getPassword()));    }    /**     * 修改     */    @PostMapping("/update")    @ApiOperationSupport(order = 6)    @ApiOperation(value = "修改", notes = "传入amDataSourceDTO")    public R<AmDataSource> update(@Validated @RequestBody                                  @UniqueEntity(                                          message = "已存在同名数据源！",                                          entityService = AmDataSourceService.class,                                          uniqueFields = {"name"}                                  )                                          AmDataSourceDTO amDataSourceDTO) {        amDataSourceDTO.setUpdateUser(AuthUtil.getUserId());        amDataSourceDTO.setUpdateTime(LocalDateTime.now());        return R.status(dataSourceManagementService.updateById(amDataSourceDTO));    }    /**     * 启用或禁用     */    @PostMapping("/change-status")    @ApiOperationSupport(order = 8)    @ApiOperation(value = "启用或禁用", notes = "传入id")    public R<AmDataSource> changeStatus(@ApiParam(value = "主键", required = true) @RequestParam Long id) {        return R.status(dataSourceManagementService.changeDataSourceStatus(id));    }    /**     * 删除     */    @PostMapping("/remove")    @ApiOperationSupport(order = 9)    @ApiOperation(value = "删除", notes = "传入id")    public R<AmDataSource> remove(@RequestParam Long id) {        return R.status(dataSourceManagementService.removeById(id));    }    @PostMapping("execute")    public ExecuteSqlResult executeSql(@RequestBody ExecuteSqlRequest request) {        return dataSourceManagementService.getDataSourceAndType(request.getDataSourceId()).executeSelectSql(request);    }    @GetMapping("monitor")    public void monitor(HttpServletRequest request, HttpServletResponse response) {//		try{//			RequestDispatcher requestDispatcher = request.getRequestDispatcher("/druid/login.html");//			requestDispatcher.forward(request,response);//		}catch (Exception e){//			log.error("forward to /druid/login.html error", e);//		}    }}